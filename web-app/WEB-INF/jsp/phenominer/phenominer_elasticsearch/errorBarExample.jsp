<html lang="en">

<head>
    <title>Chart.js Error Bars Template by handsondataviz.org</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta charset="utf-8">

    <!-- Load jQuery -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

    <!-- Load Chart.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.bundle.min.js"></script>
    <script src="/rgdweb/common/chartjs/chartjs-error-bars/Plugin.Errorbars.js"></script>
    <script >$(document).ready(function() {

        var TITLE = 'Household Income for Select US Geographies, 2018';

        // `false` for vertical (column) chart, `true` for horizontal bar
        var HORIZONTAL = false;

        // `false` for individual bars, `true` for stacked bars
        var STACKED = false;

        // Which column defines "bucket" names?
        var LABELS = 'geo';

        // For each column representing a series, define its name and color
        var SERIES = [
            {
                column: 'median',
                name: 'Median Income',
                color: 'grey',
                errorColumn: 'median_moe'
            },
            {
                column: 'mean',
                name: 'Mean Income',
                color: '#cc9999',
                errorColumn: 'mean_moe'
            }
        ];

        // x-axis label and label in tooltip
        var X_AXIS = 'Geography';

        // y-axis label and label in tooltip
        var Y_AXIS = 'US Dollars';

        // `true` to show the grid, `false` to hide
        var SHOW_GRID = true;

        // `true` to show the legend, `false` to hide
        var SHOW_LEGEND = true;

        // Read data file with random string generated by current time
        // to bypass browser cache, and create chart
        $.get('./data.csv', {'_': $.now()}, function(csvString) {

            var rows = Papa.parse(csvString, {header: true}).data;

            var datasets = SERIES.map(function(el) {
                return {
                    label: el.name,
                    labelDirty: el.column,
                    backgroundColor: el.color,
                    errorColumn: el.errorColumn,
                    data: [],
                    errorBars: {}
                }
            });

            rows.map(function(row) {
                datasets.map(function(d) {
                    d.data.push(row[d.labelDirty])
                    d.errorBars[row[LABELS]] = {
                        plus: parseFloat(row[d.errorColumn]),
                        minus: 0-parseFloat(row[d.errorColumn])
                    }
                })
            });

            var barChartData = {
                labels: rows.map(function(el) { return el[LABELS] }),
                datasets: datasets
            };

            var ctx = document.getElementById('container').getContext('2d');

            new Chart(ctx, {
                type: HORIZONTAL ? 'horizontalBar' : 'bar',
                data: barChartData,

                options: {
                    title: {
                        display: true,
                        text: TITLE,
                        fontSize: 14,
                    },
                    legend: {
                        display: SHOW_LEGEND,
                        onClick: null,
                    },
                    scales: {
                        xAxes: [{
                            stacked: STACKED,
                            scaleLabel: {
                                display: X_AXIS !== '',
                                labelString: X_AXIS
                            },
                            gridLines: {
                                display: SHOW_GRID,
                            },
                            ticks: {
                                beginAtZero: true,
                                callback: function(value, index, values) {
                                    return value.toLocaleString();
                                }
                            }
                        }],
                        yAxes: [{
                            stacked: STACKED,
                            beginAtZero: true,
                            scaleLabel: {
                                display: Y_AXIS !== '',
                                labelString: Y_AXIS
                            },
                            gridLines: {
                                display: SHOW_GRID,
                            },
                            ticks: {
                                beginAtZero: true,
                                callback: function(value, index, values) {
                                    return value.toLocaleString()
                                }
                            }
                        }]
                    },
                    tooltips: {
                        displayColors: false,
                        callbacks: {
                            label: function(tooltipItem, all) {
                                return all.datasets[tooltipItem.datasetIndex].label
                                    + ': ' + tooltipItem.yLabel.toLocaleString()
                                    + (all.datasets[tooltipItem.datasetIndex].errorBars[tooltipItem.label].plus ? ' Â± ' + all.datasets[tooltipItem.datasetIndex].errorBars[tooltipItem.label].plus.toLocaleString() : '');
                            }
                        }
                    },
                    plugins: {
                        chartJsPluginErrorBars: {
                            color: 'black',
                        }
                    }
                }
            });

        });

    });</script>

    <!-- Load PapaParse to read csv files -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.1.0/papaparse.min.js"></script>
</head>

<body>

<canvas id="container" style="width:100%; height:400px"></canvas>

<p style="font-family: Helvetica; color: #333; padding: 1em 2em; font-size: 12px">
    Source: US Census, American Community Survey 2018 (5-year estimates)
    <br>
    <a href="https://github.com/HandsOnDataViz/chartjs-error-bars">View data and code</a>,
    created by <a href="https://handsondataviz.org/">HandsOnDataViz</a>
    with <a href="https://www.chartjs.org/">Chart.js</a>
</p>

<script>$(document).ready(function() {

    var TITLE = 'Household Income for Select US Geographies, 2018';

    // `false` for vertical (column) chart, `true` for horizontal bar
    var HORIZONTAL = false;

    // `false` for individual bars, `true` for stacked bars
    var STACKED = false;

    // Which column defines "bucket" names?
    var LABELS = 'geo';

    // For each column representing a series, define its name and color
    var SERIES = [
        {
            column: 'median',
            name: 'Median Income',
            color: 'grey',
            errorColumn: 'median_moe'
        },
        {
            column: 'mean',
            name: 'Mean Income',
            color: '#cc9999',
            errorColumn: 'mean_moe'
        }
    ];

    // x-axis label and label in tooltip
    var X_AXIS = 'Geography';

    // y-axis label and label in tooltip
    var Y_AXIS = 'US Dollars';

    // `true` to show the grid, `false` to hide
    var SHOW_GRID = true;

    // `true` to show the legend, `false` to hide
    var SHOW_LEGEND = true;

    // Read data file with random string generated by current time
    // to bypass browser cache, and create chart
    $.get('./data.csv', {'_': $.now()}, function(csvString) {

        var rows = Papa.parse(csvString, {header: true}).data;

        var datasets = SERIES.map(function(el) {
            return {
                label: el.name,
                labelDirty: el.column,
                backgroundColor: el.color,
                errorColumn: el.errorColumn,
                data: [],
                errorBars: {}
            }
        });

        rows.map(function(row) {
            datasets.map(function(d) {
                d.data.push(row[d.labelDirty])
                d.errorBars[row[LABELS]] = {
                    plus: parseFloat(row[d.errorColumn]),
                    minus: 0-parseFloat(row[d.errorColumn])
                }
            })
        });

        var barChartData = {
            labels: rows.map(function(el) { return el[LABELS] }),
            datasets: datasets
        };

        var ctx = document.getElementById('container').getContext('2d');

        new Chart(ctx, {
            type: HORIZONTAL ? 'horizontalBar' : 'bar',
            data: barChartData,

            options: {
                title: {
                    display: true,
                    text: TITLE,
                    fontSize: 14,
                },
                legend: {
                    display: SHOW_LEGEND,
                    onClick: null,
                },
                scales: {
                    xAxes: [{
                        stacked: STACKED,
                        scaleLabel: {
                            display: X_AXIS !== '',
                            labelString: X_AXIS
                        },
                        gridLines: {
                            display: SHOW_GRID,
                        },
                        ticks: {
                            beginAtZero: true,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    }],
                    yAxes: [{
                        stacked: STACKED,
                        beginAtZero: true,
                        scaleLabel: {
                            display: Y_AXIS !== '',
                            labelString: Y_AXIS
                        },
                        gridLines: {
                            display: SHOW_GRID,
                        },
                        ticks: {
                            beginAtZero: true,
                            callback: function(value, index, values) {
                                return value.toLocaleString()
                            }
                        }
                    }]
                },
                tooltips: {
                    displayColors: false,
                    callbacks: {
                        label: function(tooltipItem, all) {
                            return all.datasets[tooltipItem.datasetIndex].label
                                + ': ' + tooltipItem.yLabel.toLocaleString()
                                + (all.datasets[tooltipItem.datasetIndex].errorBars[tooltipItem.label].plus ? ' Â± ' + all.datasets[tooltipItem.datasetIndex].errorBars[tooltipItem.label].plus.toLocaleString() : '');
                        }
                    }
                },
                plugins: {
                    chartJsPluginErrorBars: {
                        color: 'black',
                    }
                }
            }
        });

    });

});</script>

</body>

</html>